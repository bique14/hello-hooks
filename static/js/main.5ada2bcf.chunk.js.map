{"version":3,"sources":["CodeExample.js","UseStateExample.js","StateExample.js","App.js","serviceWorker.js","index.js"],"names":["CodeExample","code","className","style","fontSize","UseStateExample","useState","count","setCount","height","onClick","StateExample","props","setState","prevState","state","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAYeA,MAVf,YAAgC,IAATC,EAAQ,EAARA,KACrB,OACE,yBAAKC,UAAU,wCACb,yBAAKA,UAAU,+BAA+BC,MAAO,CAAEC,SAAU,QAC9DH,KCsCMI,MArBf,WAA4B,IAAD,EACCC,mBAAS,GADV,mBAClBC,EADkB,KACXC,EADW,KAGzB,OACE,yBACEN,UAAU,4EACVC,MAAO,CAAEM,OAAQ,QAEjB,wBAAIP,UAAU,sBAAd,YACA,wCAAcK,EAAd,UACA,4BACEL,UAAU,oDACVQ,QAAS,kBAAMF,EAASD,EAAQ,KAFlC,YAMA,kBAAC,EAAD,CAAaN,KApCT,4gB,mCC4EKU,E,kDArCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRJ,SAAW,WACT,EAAKK,UAAS,SAACC,GACb,OAAO,2BACFA,GADL,IAEEP,MAAOO,EAAUP,MAAQ,QAT7B,EAAKQ,MAAQ,CACXR,MAAO,GAHQ,E,qDAgBT,IACAA,EAAUS,KAAKD,MAAfR,MACR,OACE,yBACEL,UAAU,4EACVC,MAAO,CAAEM,OAAQ,QAEjB,wBAAIP,UAAU,sBAAd,SACA,wCAAcK,EAAd,UACA,4BACEL,UAAU,oDACVQ,QAASM,KAAKR,UAFhB,YAMA,kBAAC,EAAD,CAAaP,KAtEX,61B,GAsCiBgB,IAAMC,WC5BlBC,MATf,WACE,OACE,yBAAKjB,UAAU,mDACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5ada2bcf.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CodeExample({ code }) {\n  return (\n    <div className=\"bg-black rounded text-green-400 mt-4\">\n      <pre className=\"overflow-auto text-left p-2 \" style={{ fontSize: \"8px\" }}>\n        {code}\n      </pre>\n    </div>\n  );\n}\n\nexport default CodeExample;\n","import React, { useState } from \"react\";\nimport CodeExample from \"./CodeExample\";\n\nconst code = `function UseStateExample() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div\n      className=\"text-white text-center bg-gray-600 rounded w-2/5 p-4 m-auto overflow-auto\"\n      style={{ height: \"70%\" }}\n    >\n      <h1 className=\"font-bold text-4xl\">useState</h1>\n      <p>You click {count} times</p>\n      <button\n        className=\"rounded bg-white text-black px-2 py-1 my-2 w-full\"\n        onClick={() => setCount(count + 1)}\n      >\n        click me\n      </button>\n    </div>\n  );\n}`;\n\nfunction UseStateExample() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div\n      className=\"text-white text-center bg-gray-600 rounded w-2/5 p-4 m-auto overflow-auto\"\n      style={{ height: \"70%\" }}\n    >\n      <h1 className=\"font-bold text-4xl\">useState</h1>\n      <p>You click {count} times</p>\n      <button\n        className=\"rounded bg-white text-black px-2 py-1 my-2 w-full\"\n        onClick={() => setCount(count + 1)}\n      >\n        click me\n      </button>\n      <CodeExample code={code} />\n    </div>\n  );\n}\n\nexport default UseStateExample;\n","import React from \"react\";\nimport CodeExample from \"./CodeExample\";\n\nconst code = `class StateExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  setCount = () => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        count: prevState.count + 1,\n      };\n    });\n  };\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div\n        className=\"text-white text-center bg-gray-600 rounded w-2/5 p-4 m-auto overflow-auto\"\n        style={{ height: \"70%\" }}\n      >\n        <h1 className=\"font-bold text-4xl\">State</h1>\n        <p>You click {count} times</p>\n        <button\n          className=\"rounded bg-white text-black px-2 py-1 my-2 w-full\"\n          onClick={this.setCount}\n        >\n          click me\n        </button>\n        <CodeExample code={code} />\n      </div>\n    );\n  }\n}`;\n\nclass StateExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  setCount = () => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        count: prevState.count + 1,\n      };\n    });\n  };\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div\n        className=\"text-white text-center bg-gray-600 rounded w-2/5 p-4 m-auto overflow-auto\"\n        style={{ height: \"70%\" }}\n      >\n        <h1 className=\"font-bold text-4xl\">State</h1>\n        <p>You click {count} times</p>\n        <button\n          className=\"rounded bg-white text-black px-2 py-1 my-2 w-full\"\n          onClick={this.setCount}\n        >\n          click me\n        </button>\n        <CodeExample code={code} />\n      </div>\n    );\n  }\n}\n\nexport default StateExample;\n","import React, { useState } from \"react\";\nimport UseStateExample from \"./UseStateExample\";\nimport StateExample from \"./StateExample\";\n\nfunction App() {\n  return (\n    <div className=\"h-full flex flex-row justify-around bg-gray-800\">\n      <UseStateExample />\n      <StateExample />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}